SQL

*after making a database in psql, connect to it with \c name
*TABLE types shows table and values
*\dt shows database with schema, table names, types, and owner
*\x expands display when loading tables

- comments out the line

Comparison operators
=
<
>
<=
>=
!=

Types
	Text/String
		-text
		-char(n)

	Numeric
		-integer
		-real (like python float, 6 decimal places)
		-double precision (15 decimal places)

	Date/Time (always needs single quotes)
		-date
		-time
		-timestamp (date and time together)

--------


*
Returns all 

Statements

SELECT
	-returns a table
INSERT
	-INSERT into 'table' (column1, column2) values (val1, val2)
	-INSERT into 'table' values (val1, val2)

SELECT clauses
	WHERE
		-filter a table for rows that follow a specific rule
	LIMIT #
		-returns as many as the #
	OFFSET #
		-how many #'s to skip
	ORDER BY [column name]
		-which column to sort by
	GROUP BY
		-only use with count/sum
		-instead of bringing all rows, just bring in the ones that share a common value

CREATE clauses
	TABLE *tablename* (
		column1 type [constraints],
		column2 type [constraints],
			.....
			[row constraints]);
	DATABASE name [options];

DROP clauses
	DATABASE name[options];
	TABLE name[options];

JOIN clauses
	JOIN (inner)
	LEFT JOIN
		-returns all the combined rows, plus the rows where the left table has an entry but the right doesn't
		-if there's a count(*), change * to the right_table.column_name
	RIGHT JOIN
		-returns combined rows plus rows on the right table that have entries but the left doesn't
		-same thing with count(*), change * to left_table.column_name
------------

Keys/Relationships

*single column primary key
CREATE TABLE tablename (
	column1 type primary key,
	column2 type,
	--- );

*multi column primary key
CREATE TABLE tablename (
	column1 type,
	column2 type,
	column3 type,
	primary key (column1, column3));
	--- );

*declaring relationships
CREATE TABLE tablename (
	column1 type reference *other_table(other_column_name),
	column2 type,
	--- );

-------------
Views
	-a view is a select query stored in the database so you can use it like a table
CREATE VIEW viewname AS select ...