View a Repo's History

git log
log --oneline
	shows only commits and commit descriptions
log --oneline --decorate --graph --all
	graph adds bullets and lines to the left of the output, all displays all branches in repo
log --stat
	displays the files that have been changed in the commit, and the number of lines added/deleted
log --patch (or log -p)
	displays the actual changes made to a file
log -p --stat
	display stat info above the patch info
log -p -w
	show patch information, but will not highlight lines where only whitespace changes have occured
log -p [first 7 of commit]
	show commits starting at a specific commit

git show [commit #]
	shows only one commit

---------------
Add commits to a Repo

mkdir .gitignore
	allows you to keep a file in your project's directory structure but not commit it to the project
	Users/Carter Carlson/**.jpg ignores all jpg files in the folder and all nested jpg files

git add [filename]
	add files from the working directory to the staging index
git add .
	shortcut to refer to all files or directories

git commit
commit
	take files from the staging index and save them to the repository
commit -m "commit message"
	uses the quotes as a commit message, but doesn't provide a description for the commit

git diff
diff
	displays the difference between the last commit and the changes you've saved but not committed
diff [SHA 1] [SHA 2]
	displays the difference between those two commits

----------------
Tagging, Branching, and merging

git tag -a v1.0(or whatever tag you want) [include SHA if the tag shouldn't be on most recent commit]
tag
	add tags to specific commits
	-a for annotaded flag
		includes person who made tag, date of tag, and tag message
	-d [version#] to delete

git branch
branch
	shows the active branch
branch [new branch name]
	allows multiple lines of development
branch -d [branch name]
	delete the selected branch
branch [new branch name] [SHA]
	create branch on the specific commit SHA

git checkout [new branch name]
checkout
	switch between different branches so you can continue on the other branch
checkout -b [new branch name]
	create a new branch, and switch to it in one command
checkout -b [new branch name] [other branch name]
	create a new branch off of the selected other branch

git merge
merge [name of branch to merge in to active branch]
	combines changes on different branches with a commit

reset --hard HEAD^
	Undo a merge
	^ indicates the parent commit
	~ indicated the first parent commit
----------------
Undoing changes

git commit --amend
	alter the most-recent commit

git revert [SHA]
	takes the changes in a commit and does the exact opposite

git reset [reference to commit]
	moves HEAD and current branch pointer to the referenced commit, and erases all commits after

git branch backup
	makes a backup with the active branch on the current commit
----------

Remote Repositories

git remote
remote
	manage remote repository
remote add
	add a connection to a new remote repo
remote -v
	see the details about a connection to a remote

git push
push
	send changes to the remote
push <remote-name> <branch>
	send your commits to the remote repo on github (git push origin master)

git pull 
	retrieve changes from the remote

git fetch
	retrieve changes from the remote, but don't change local repo
	allows you to merge
-------------

Reviewing existing work

git shortlog
	displays all commits sorted by author

git shortlog -s -n
	shows the total number of commits by each author, sorted numerically

git log --author=AuthorName
	display all the commits by one author

git log --grep=blank
	filter down to commits that reference the word "blank"
----------

Editing existing work

git rebase
p, pick
	keep the commit as is
r, reword
	keep te commits content but change the commit message
e, edit
	keep the commits content but stop before committing so you can
		-add new files
		-remove files
		-alter content that was going to be committed
s, squash
	combine this commit's changes into the previous commit
f, fixup
	combine this commit's change to the previous one but drop the commit message
x, exec
	run a shell command
d, drop
	delete the commit
i, interactive
	lets you choose where to connect (git rebase -i head~2)